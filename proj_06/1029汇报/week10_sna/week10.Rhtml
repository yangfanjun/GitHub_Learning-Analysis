<html>

<head>
<title>week10_sna</title>
</head>

<body>

<p>引入stats、dplyr、igraph包<br>
stats：包含统计计算和随机数生成的函数<br>
dplyr：包含重要的数据操作函数<br>
igraph：一个绘制图形的工具包<br>
</p>

<!--begin.rcode
library(stats)
library(dplyr)
library(igraph)
end.rcode-->

<p>读取数据表</p>

<!--begin.rcode
all_code=read.csv("all_code.csv", header=TRUE)
end.rcode-->

<p>筛选Week 10部分，选取vert1_id和vert2_id两列，存入week10_code，每行代表vert1_id向vert2_id回复一次</p>

<!--begin.rcode
week10_code <- all_code %>% filter(week=="Week 10") %>% select(vert1_id,vert2_id)
end.rcode-->

<p>将week10_code转化为igraph的数据格式，这是一张有向图</p>

<!--begin.rcode
all_igraph <- graph_from_data_frame(d=week10_code, directed=T)
end.rcode-->

<p>获得图中每条边的情况和节点名称</p>

<!--begin.rcode
E(all_igraph)     
V(all_igraph)
end.rcode-->

<p><b>节点层面分析</b><br>
计算每个节点的入度，并画出柱状图
</p>

<!--begin.rcode
igraph::degree(all_igraph)
end.rcode-->
<!--begin.rcode fig.width=10, fig.height=6
indegree_v <- igraph::degree(all_igraph)
barplot(indegree_v, main="Indegree Bar Plot", xlab="Identity", ylab="Indegree")
end.rcode-->


<p>计算每个节点的出度，并画出柱状图</p>

<!--begin.rcode
igraph::degree(all_igraph,mode="out")
end.rcode-->
<!--begin.rcode fig.width=10, fig.height=6
outdegree_v <- igraph::degree(all_igraph,mode="out")
barplot(outdegree_v, main="Outdegree Bar Plot", xlab="Identity", ylab="Outdegree")
end.rcode-->

<p>中介中心性(Betweenness)这个度量很有意思，这个有点像是我们身边那种社交达人，我们认识的不少朋友可能都是通过他/她认识的，这个人起到了中介的作用。中介中心性指的是一个结点担任其它两个结点之间最短路的桥梁的次数。</p>

<!--begin.rcode
igraph::betweenness(all_igraph)
end.rcode-->
<!--begin.rcode fig.width=10, fig.height=6
betweenness_v <- igraph::betweenness(all_igraph)
barplot(betweenness_v, main="Betweenness Bar Plot", xlab="Identity", ylab="Betweenness")
end.rcode-->

<p>特征向量中心性(Eigenvector Centrality)。一个节点的重要性既取决于其邻居节点的数量(即该节点的度)，也取决于其邻居节点的重要性。
</p>

<!--begin.rcode
igraph::eigen_centrality(all_igraph)
end.rcode-->
<!--begin.rcode fig.width=10, fig.height=6
eigen_centrality_v <- igraph::eigen_centrality(all_igraph)
barplot(eigen_centrality_v$vector, main="Eigenvector Centrality Bar Plot", xlab="Identity", ylab="Eigenvector Centrality")
end.rcode-->

<p><b>网络层面分析</b><br>
图的直径是最长线的长度，直径采用宽度优先搜索法计算</p>

<!--begin.rcode
igraph::diameter(all_igraph, directed = TRUE)
end.rcode-->

<p>在有向图中对节点两两之间的关系进行分类，可以分为三种状态：相互的、不对称的或不存在的，13+54+123=190=c20/2</p>

<!--begin.rcode
dyad_census(all_igraph)
end.rcode-->

<p>节点两两之间最短距离，返回一个矩阵</p>

<!--begin.rcode
distances(all_igraph)
end.rcode-->

<p>中心化：以顶点的中心度进行图中心化度量的一种方法</p>

<!--begin.rcode
centr_degree(all_igraph)$centralization
centr_clo(all_igraph, mode="all")$centralization
centr_eigen(all_igraph, directed=FALSE)$centralization
end.rcode-->

<p>使用<b>visNetwork</b>进行可视化绘图</p>

<!--begin.rcode
library(visNetwork)
end.rcode-->

<p>vert1_id和vert2_id单独成列，命名为nodes_v1和nodes_v2</p>

<!--begin.rcode
nodes_v1 <- all_code %>% filter(week=="Week 10") %>% select(vert1_id)
nodes_v2 <- all_code %>% filter(week=="Week 10") %>% select(vert2_id)
end.rcode-->

<p>分别取出nodes_v1和nodes_v2中不重复元素，再取并集，组成字符串向量，放入unique_nodes中</p>

<!--begin.rcode
unique_nodes_v1 <- as.character(unique(nodes_v1$vert1_id))
unique_nodes_v2 <- as.character(unique(nodes_v2$vert2_id))
unique_nodes <- union(unique_nodes_v1, unique_nodes_v2)
unique_nodes_v1
unique_nodes_v2
unique_nodes
end.rcode-->

<p>设index为unique_nodes中每个元素的数字索引，将数字索引和节点放入一张数据表，一一对应，生成索引对照表</p>

<!--begin.rcode
index <- seq(1,length(unique_nodes))
unique_char_num = data.frame(unique_nodes, index)
unique_char_num
end.rcode-->

<p>将nodes_v1和nodes_v2转化为字符串向量</p>

<!--begin.rcode
nodes_v1_c <- as.character(nodes_v1$vert1_id)
nodes_v2_c <- as.character(nodes_v2$vert2_id)
end.rcode-->

<p>准备两个空向量，用于存放结果</p>

<!--begin.rcode
nodes_v1_n <- c()
nodes_v2_n <- c()
end.rcode-->

<p>依据索引对照表，将字符串向量转化为数字向量</p>

<!--begin.rcode
for (i in nodes_v1_c) nodes_v1_n <- append(nodes_v1_n,(unique_char_num[which(unique_char_num$unique_nodes==i), "index"]))
for (i in nodes_v2_c) nodes_v2_n <- append(nodes_v2_n,(unique_char_num[which(unique_char_num$unique_nodes==i), "index"]))
nodes_v1_c
nodes_v1_n
nodes_v2_c
nodes_v2_n
end.rcode-->

<p>依据特征向量中心性赋予节点不同的颜色，中心性越高，节点越发紫</p>

<!--begin.rcode
colorchange <- c()
for (i in eigen_centrality_v$vector){
  # 将%%替换为计算后的数值，数值最终转化为字符串形式
  color_str <- "rgba(151,%%,252,1)"
  colorchange <- append(colorchange, gsub("%%", as.character(194-round(120*i^0.8)), color_str))}
colorchange
end.rcode-->

<p>设置visNetwork节点属性，节点大小为2*(入度+出度)^0.8</p>

<!--begin.rcode
nodes <- data.frame(id=unique_char_num$index, label=unique_char_num$unique_nodes, 
                    size = 2*(indegree_v+outdegree_v)^0.8, color.background=colorchange)
end.rcode-->

<p>设置visNetwork边属性，边是有向的</p>

<!--begin.rcode
edges <- data.frame(from = nodes_v1_n, to = nodes_v2_n)
end.rcode-->

<p>visNetwork画图，节点标签字体大小30px，箭头大小0.8</p>

<!--begin.rcode fig.width=8, fig.height=4
visNetwork(nodes, edges, height = "600px", width = "100%") %>%
  visNodes(font="30px") %>%
  visEdges(arrows =list(to = list(enabled = TRUE, scaleFactor = 0.8)))
end.rcode-->

</body>
</html>
